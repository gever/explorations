// This code (game.js) was generated by Gemini,
// a large language model from Google, on Mon Jul 28 11:02:56 2025
//
// This code was created based on user prompts from Gever Tulley.

(function() {
    'use strict';

    const splashScreen = document.getElementById('splash-screen');
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    function runGame() {
        const G = 60000;
        const ROCKET_MULTIPLIER = 2;
        const PAR_MULTIPLIER = 1.25;
        const STAR_COUNT = 200;

        // Player movement constants
        const MIN_MOVE = 2;
        const MAX_MOVE = 10;
        const ROCKET_LIFESPAN_MS = 8000;
        const PARTICLE_COUNT = 10;
        const PARTICLE_DURATION_MS = 750;
        const ROUND_END_DELAY_MS = 1000;

        let lastTime = 0;
        let planets = [];
        let rockets = [];
        let trailPoints = [];
        let particles = [];
        let stars = [];

        // Game State
        let gameState = 'playing'; // 'playing', 'round_ending', 'round_over', 'game_over'
        let roundEndTimer = 0;
        let roundNumber = 1;
        let totalScore = 0;
        let infectedPlanetCount = 0;
        let rocketsLeft = 0;
        let initialRockets = 0;
        let currentPar = 0;

        const player = {
            x: 40,
            y: 0,
            size: 25,
            color: '#66aaff'
        };
        
        function createStars() {
            stars = [];
            for (let i = 0; i < STAR_COUNT; i++) {
                stars.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 2 + 1,
                    alpha: Math.random() * 0.5 + 0.2
                });
            }
        }

        function createPlanet(status) {
            const mass = 80 + Math.random() * 70;
            return {
                x: canvas.width * 0.3 + Math.random() * canvas.width * 0.6,
                y: canvas.height * 0.1 + Math.random() * canvas.height * 0.8,
                mass: mass,
                radius: mass / 7,
                status: status // 'infected', 'cured', 'healthy'
            };
        }

        function createExplosion(x, y, color) {
            for (let i = 0; i < PARTICLE_COUNT; i++) {
                const angle = Math.random() * Math.PI * 2;
                const speed = Math.random() * 20 + 10;
                particles.push({
                    x: x,
                    y: y,
                    vx: Math.cos(angle) * speed,
                    vy: Math.sin(angle) * speed,
                    color: color,
                    alpha: 1,
                    decayRate: 1000 / PARTICLE_DURATION_MS
                });
            }
        }

        function newRound() {
            const baseProgression = 2 + Math.floor((roundNumber - 1) / 3);
            infectedPlanetCount = (baseProgression >= 6) ? (3 + Math.floor(Math.random() * 4)) : baseProgression;

            initialRockets = ROCKET_MULTIPLIER * infectedPlanetCount;
            currentPar = Math.ceil(PAR_MULTIPLIER * infectedPlanetCount);
            rocketsLeft = initialRockets;

            rockets = [];
            planets = [];
            trailPoints = [];
            particles = [];

            for (let i = 0; i < infectedPlanetCount; i++) {
                planets.push(createPlanet('infected'));
            }

            if (roundNumber > 3) {
                const healthyPlanetCount = Math.floor(Math.random() * 3); // 0, 1, or 2
                for (let i = 0; i < healthyPlanetCount; i++) {
                    planets.push(createPlanet('healthy'));
                }
            }
            gameState = 'playing';
        }

        function launchRocket() {
            if (rocketsLeft <= 0 || gameState !== 'playing') return;
            rocketsLeft--;
            rockets.push({
                x: player.x + player.size,
                y: player.y,
                vx: 200,
                vy: 0,
                color: player.color,
                life: ROCKET_LIFESPAN_MS
            });
        }

        function checkRoundStatus() {
            const stillInfected = planets.filter(p => p.status === 'infected').length;

            if (stillInfected === 0) {
                const rocketsUsed = initialRockets - rocketsLeft;
                const roundScore = rocketsUsed - currentPar;
                totalScore += roundScore;
                gameState = 'round_ending';
                roundEndTimer = ROUND_END_DELAY_MS;
            } else if (rocketsLeft === 0 && rockets.length === 0) {
                const rocketsUsed = initialRockets;
                const roundScore = rocketsUsed - currentPar;
                totalScore += roundScore;
                gameState = 'game_over';
            }
        }

        function updateParticles(dt) {
             particles.forEach(p => {
                p.alpha -= p.decayRate * dt;
                p.x += p.vx * dt;
                p.y += p.vy * dt;
            });
            particles = particles.filter(p => p.alpha > 0);
        }

        function update(deltaTime) {
            if (!deltaTime) return;
            const dt = deltaTime / 1000;
            
            updateParticles(dt);

            if (gameState === 'round_ending') {
                roundEndTimer -= deltaTime;
                if (roundEndTimer <= 0) {
                    gameState = 'round_over';
                }
                return;
            }

            if (gameState !== 'playing') return;

            rockets.forEach(r => {
                r.life -= deltaTime;
                if (r.life <= 0) {
                    if (!r.exploded && r.x > 0 && r.x < canvas.width && r.y > 0 && r.y < canvas.height) {
                        createExplosion(r.x, r.y, '#ffff00'); // Yellow sparks for timeout
                        r.exploded = true; 
                    }
                    return;
                }

                planets.forEach(p => {
                    const dx = p.x - r.x;
                    const dy = p.y - r.y;
                    const distSq = dx * dx + dy * dy;

                    if (distSq < (p.radius * p.radius)) {
                        if (p.status === 'infected') {
                            p.status = 'cured';
                            createExplosion(r.x, r.y, '#66aaff'); // Blue sparks for vaccination
                        } else if (p.status === 'healthy') {
                            createExplosion(r.x, r.y, '#ff4444'); // Red sparks for hitting healthy planet
                        }
                        r.life = 0; // Expire rocket on any hit
                        return;
                    }

                    const force = G * p.mass / distSq;
                    const dist = Math.sqrt(distSq);
                    r.vx += (force * (dx / dist)) * dt;
                    r.vy += (force * (dy / dist)) * dt;
                });
                r.x += r.vx * dt;
                r.y += r.vy * dt;
                trailPoints.push({ x: r.x, y: r.y, color: r.color });
            });
            
            rockets = rockets.filter(r => r.life > 0);
            checkRoundStatus();
        }

        function drawOverlay(title, ...lines) {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            ctx.fillStyle = 'white';
            ctx.textAlign = 'center';
            ctx.font = '48px "Courier New"';
            ctx.fillText(title, canvas.width / 2, canvas.height / 2 - 120);

            ctx.font = '24px "Courier New"';
            lines.forEach((line, i) => {
                ctx.fillText(line, canvas.width / 2, canvas.height / 2 - 40 + (i * 35));
            });
        }

        function render() {
            ctx.fillStyle = '#080810';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw Stars
            stars.forEach(s => {
                ctx.fillStyle = `rgba(255, 255, 255, ${s.alpha})`;
                ctx.fillRect(s.x, s.y, s.size, s.size);
            });

            ctx.fillStyle = "#0000ff";
            trailPoints.forEach(p => ctx.fillRect(p.x, p.y, 4, 4));

            ctx.fillStyle = player.color;
            ctx.beginPath();
            ctx.moveTo(player.x + player.size, player.y);
            ctx.lineTo(player.x, player.y - player.size / 2);
            ctx.lineTo(player.x, player.y + player.size / 2);
            ctx.closePath();
            ctx.fill();

            planets.forEach(p => {
                switch (p.status) {
                    case 'infected': ctx.fillStyle = '#ffaa66'; break;
                    case 'cured':    ctx.fillStyle = '#66ffaa'; break;
                    case 'healthy':  ctx.fillStyle = '#88ddff'; break;
                }
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
                ctx.fill();
            });

            rockets.forEach(r => {
                ctx.fillStyle = r.color;
                ctx.fillRect(r.x, r.y, 2, 2);
            });

            particles.forEach(p => {
                ctx.fillStyle = p.color;
                ctx.globalAlpha = p.alpha;
                ctx.fillRect(p.x - 1, p.y - 1, 2, 2);
                ctx.globalAlpha = 1;
            });
            
            // --- UI Rendering ---
            const stillInfectedCount = planets.filter(p => p.status === 'infected').length;
            let scoreDisplay;
            if (totalScore === 0) {
                scoreDisplay = 'E';
            } else if (totalScore > 0) {
                scoreDisplay = `+${totalScore}`;
            } else {
                scoreDisplay = totalScore;
            }

            const defaultFont = '16px "Courier New"';
            const boldFont = 'bold 16px "Courier New"';

            // Top-left UI
            ctx.font = defaultFont;
            ctx.fillStyle = 'white';
            ctx.textAlign = 'left';
            ctx.fillText(`Total Score: ${scoreDisplay}`, 10, 40);
            
            // Top-right UI
            ctx.textAlign = 'right';
            const rocketText = `Rockets: ${rocketsLeft}`;
            if (rocketsLeft === 0) {
                ctx.font = boldFont;
                const textWidth = ctx.measureText(rocketText).width;
                const padding = 4;
                ctx.fillStyle = '#cc3333';
                ctx.fillRect(canvas.width - 10 - textWidth - padding, 20 - 16, textWidth + (padding * 2), 16 + padding);
                ctx.fillStyle = 'white';
                ctx.fillText(rocketText, canvas.width - 10, 20);
            } else if (rocketsLeft === 1) {
                ctx.font = boldFont;
                ctx.fillStyle = '#ff4444';
                ctx.fillText(rocketText, canvas.width - 10, 20);
            } else if (rocketsLeft < 3) {
                ctx.font = boldFont;
                ctx.fillStyle = '#ffff66';
                ctx.fillText(rocketText, canvas.width - 10, 20);
            } else {
                ctx.font = defaultFont;
                ctx.fillStyle = 'white';
                ctx.fillText(rocketText, canvas.width - 10, 20);
            }
            
            ctx.font = defaultFont;
            ctx.fillStyle = 'white';
            ctx.fillText(`Infected: ${stillInfectedCount}`, canvas.width - 10, 40);
            
            // Top-center UI
            ctx.font = '20px "Courier New"';
            ctx.textAlign = 'center';
            ctx.fillText(`Round: ${roundNumber} | Par: ${currentPar}`, canvas.width / 2, 30);


            if (gameState === 'round_over') {
                const rocketsUsed = initialRockets - rocketsLeft;
                const roundScore = rocketsUsed - currentPar;
                let roundScoreDisplay = roundScore > 0 ? `+${roundScore}` : `${roundScore}`;
                if (roundScore === 0) roundScoreDisplay = 'E';
                
                drawOverlay(`Round ${roundNumber} Complete!`, 
                    `Par: ${currentPar}`, 
                    `Shots: ${rocketsUsed}`,
                    `Score: ${roundScoreDisplay}`,
                    '', 
                    'Click or press Space to continue...');
            } else if (gameState === 'game_over') {
                drawOverlay('Game Over', `You reached Round ${roundNumber}.`, `Final Score: ${scoreDisplay}`, '', 'Click or press Space to play again.');
            }
        }
        
        function gameLoop(timestamp) {
            const deltaTime = timestamp - lastTime;
            lastTime = timestamp;
            update(deltaTime);
            render();
            requestAnimationFrame(gameLoop);
        }

        function handleAdvance() {
            if (gameState === 'round_over') {
                roundNumber++;
                newRound();
            } else if (gameState === 'game_over') {
                roundNumber = 1;
                totalScore = 0;
                newRound();
            }
        }

        function resize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            player.y = canvas.height / 2;
            roundNumber = 1;
            totalScore = 0;
            createStars();
            newRound();
        }
        
        window.addEventListener('keydown', e => {
            if (e.code === 'Space' && e.target === document.body) {
                e.preventDefault();
                if (gameState === 'playing') {
                    launchRocket();
                } else if (gameState !== 'round_ending'){
                    handleAdvance();
                }
            } else if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
                e.preventDefault();
                const moveDistance = e.shiftKey ? MAX_MOVE : MIN_MOVE;
                player.y += (e.key === 'ArrowUp' ? -moveDistance : moveDistance);
                player.y = Math.max(player.size / 2, Math.min(canvas.height - player.size / 2, player.y));
            }
        });

        canvas.addEventListener('click', () => {
             if (gameState !== 'round_ending') {
                handleAdvance();
             }
        });
        window.addEventListener('resize', resize);
        
        resize();
        requestAnimationFrame(gameLoop);
    }
    
    function startGame(e) {
        e.preventDefault();
        splashScreen.style.display = 'none';
        canvas.style.display = 'block';
        runGame();
    }
    
    splashScreen.addEventListener('click', startGame, { once: true });
    window.addEventListener('keydown', (e) => {
        if (e.code === 'Space') {
            startGame(e);
        }
    }, { once: true });

})();
